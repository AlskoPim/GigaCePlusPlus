#include <SFML/Graphics.hpp>
#include <cmath>
#include <iostream>

int main() {
    sf::RenderWindow window(sf::VideoMode(750, 750, 32), "Sigma Chigga");

    // Define the line
    sf::VertexArray line(sf::Lines, 2);
    line[0].position = sf::Vector2f(10.f, 10.f);
    line[1].position = sf::Vector2f(500.f, 10.f);
    line[0].color = sf::Color::Red;
    line[1].color = sf::Color::Blue;

    // Load texture and sprite
    sf::Texture tekstura;
    if (!tekstura.loadFromFile("chigga.jpg")) {
        std::cerr << "Error loading texture!" << std::endl;
        return -1;
    }
    sf::Sprite obrazek;
    obrazek.setTexture(tekstura);
    obrazek.setScale(0.25f, 0.25f);
    obrazek.setOrigin(obrazek.getLocalBounds().width / 2, obrazek.getLocalBounds().height / 2);
    obrazek.setPosition(320, 240);

    // Initialize clock for delta time calculation
    sf::Clock clock;

    // Movement speed in pixels per second
    float speed = 200.0f;

    // Get window size
    sf::Vector2u windowSize = window.getSize();

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            // Close event
            if (event.type == sf::Event::Closed ||
                (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Escape)) {
                window.close();
            }

            //// Key press events
            //if (event.type == sf::Event::KeyPressed) {
            //    // Rotate the sprite with Q and E keys
            //    if (event.key.code == sf::Keyboard::Q) {
            //        obrazek.rotate(-5.0f); // Rotate left
            //    }
            //    if (event.key.code == sf::Keyboard::E) {
            //        obrazek.rotate(5.0f); // Rotate right
            //    }
            //}
        }

        // Delta time for smooth movement
        float deltaTime = clock.restart().asSeconds();

        // Get current position of the sprite
        sf::Vector2f position = obrazek.getPosition();
        float rotation = obrazek.getRotation();

        // Handle movement with WASDQE keys
        // MOVE
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::W)) {
            obrazek.move(0, -speed * deltaTime);  // Move up
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) {
            obrazek.move(0, speed * deltaTime);   // Move down
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)) {
            obrazek.move(-speed * deltaTime, 0);  // Move left
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::D)) {
            obrazek.move(speed * deltaTime, 0);   // Move right
        }
        // ROTATE
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Q)) {
            obrazek.rotate(-100.0f * deltaTime);   // Rotate left
            std::cout << rotation << std::endl;
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::E)) {
            obrazek.rotate(100.0f * deltaTime);   // Rotate left
            std::cout << rotation << std::endl;
        }

        // Boundary checks to keep sprite inside window
        if (position.x - obrazek.getGlobalBounds().width / 2 < 0) {
            obrazek.setPosition(obrazek.getGlobalBounds().width / 2, position.y);  // Left edge
        }
        if (position.x + obrazek.getGlobalBounds().width / 2 > windowSize.x) {
            obrazek.setPosition(windowSize.x - obrazek.getGlobalBounds().width / 2, position.y);  // Right edge
        }
        if (position.y - obrazek.getGlobalBounds().height / 2 < 0) {
            obrazek.setPosition(position.x, obrazek.getGlobalBounds().height / 2);  // Top edge
        }
        if (position.y + obrazek.getGlobalBounds().height / 2 > windowSize.y) {
            obrazek.setPosition(position.x, windowSize.y - obrazek.getGlobalBounds().height / 2);  // Bottom edge
        }

        // Clear the window and draw the sprite
        window.clear(sf::Color::Black);
        window.draw(obrazek);
        window.display();
    }

    return 0;
}
